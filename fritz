#!/usr/bin/env python
import argparse
from contextlib import contextmanager
import datetime
import os
from pathlib import Path
import subprocess
import sys
import yaml


@contextmanager
def status(message):
    # from baselayer
    print(f'[¬∑] {message}', end='')
    try:
        yield
    except:  # noqa: E722
        print(f'\r[‚úó] {message}')
        raise
    else:
        print(f'\r[‚úì] {message}')


def generate_kowalski_token(user_id, jwt_secret, jwt_algorithm='HS256',
                            jwt_exp_delta_seconds=30 * 86400 * 12):
    """
    Generate a token for SkyPortal to access Kowalski
    """
    import jwt

    jwt_config = {
        'user_id': user_id,
        'JWT_SECRET': jwt_secret,
        'JWT_ALGORITHM': jwt_algorithm,
        'JWT_EXP_DELTA_SECONDS': jwt_exp_delta_seconds,
    }

    payload = {
        'user_id': jwt_config['user_id'],
        'exp': datetime.datetime.utcnow() + datetime.timedelta(seconds=jwt_config['JWT_EXP_DELTA_SECONDS'])
    }
    jwt_token = jwt.encode(payload, jwt_config['JWT_SECRET'], jwt_config['JWT_ALGORITHM'])

    return jwt_token.decode('utf-8')


def generate_skyportal_token():
    """
    Generate a token for Kowalski to access SkyPortal
    this is ugly and should be re-done, but gets the work done, so ok for now
    """
    result = subprocess.run(
        ["docker", "exec", "-it", "skyportal_web_1", "/bin/bash", "-c",
         "source /skyportal_env/bin/activate; "
         """python -c "from baselayer.app.config import load_config; """
         """from skyportal.models import init_db; """
         """from skyportal.model_util import create_token; """
         """conn = init_db(**load_config(['config.yaml'])['database']); """
         """print(create_token(['Upload data', 'Manage sources'], 1, 'kowalski'))" """
         ],
        cwd="skyportal",
        capture_output=True,
        universal_newlines=True,
    )
    token = result.stdout.split()[-1]

    if len(token) != 36:
        raise RuntimeError('Failed to generate a SkyPortal token for Kowalski')

    return token


def check_config(cfg='fritz.defaults.yaml', yes=False):
    c = cfg.replace('.defaults', '')
    if not Path(c).exists():
        cd = input(
            f'{c} does not exist, do you want to use {cfg} (not recommended)? [y/N] '
        ) if not yes else 'y'
        if cd.lower() == 'y':
            subprocess.run(["cp", f"{cfg}", f"{c}"], check=True)
        else:
            raise IOError(f'{c} does not exist, aborting')

    # generate a token for SkyPortal to talk to Kowalski:
    with open(c) as cyaml:
        config = yaml.load(cyaml, Loader=yaml.FullLoader)

    kowalski_token = generate_kowalski_token(
        user_id=config['kowalski']['server']['admin_username'],
        jwt_secret=config['kowalski']['server']['JWT_SECRET_KEY'],
    )
    config['app']['kowalski_token'] = kowalski_token

    with open(c, 'w') as cyaml:
        yaml.dump(config, cyaml)  # default_flow_style=False

    # copy over to Kowalski and SkyPortal
    for submodule in ('kowalski', 'skyportal'):
        target_c = f"{submodule}/config.yaml"
        subprocess.run(["cp", f"{c}", target_c], check=True)


def run(args):
    """
    Launch Fritz
    """
    env = os.environ.copy()
    env.update({"FLAGS": "--config=../fritz.yaml"})

    # initialize/update fritz's submodules kowalski and skyportal
    if args.init:
        # pull skyportal and kowalski
        p = subprocess.run(['git', 'submodule', 'update', '--init', '--recursive'])
        if p.returncode != 0:
            raise RuntimeError("Failed to initialize fritz's submodules")
        p = subprocess.run(['git', 'submodule', 'update', '--recursive'])
        if p.returncode != 0:
            raise RuntimeError("Failed to update fritz's submodules")
    else:
        p = subprocess.run(['git', 'submodule', 'update', '--recursive'])
        if p.returncode != 0:
            raise RuntimeError("Failed to update fritz's submodules")

    if args.init:
        check_config(cfg='fritz.defaults.yaml', yes=args.yes)

    if args.init:
        # Build skyportal's images
        p = subprocess.run(["make", "docker-local"], cwd="skyportal")
        if p.returncode != 0:
            raise RuntimeError("Failed to build skyportal's docker images")

    # start up skyportal
    p = subprocess.run(["docker-compose", "up", "-d"], cwd="skyportal")
    if p.returncode != 0:
        raise RuntimeError("Failed to start skyportal")

    if args.init:
        # init skyportal and load test data
        p = subprocess.run(["docker", "exec", "-it", "skyportal_web_1", "/bin/bash", "-c",
                            "source /skyportal_env/bin/activate; make load_demo_data"], cwd="skyportal")
        if p.returncode != 0:
            raise RuntimeError("Failed to init skyportal and load test data")

        # generate a token for Kowalski to talk to SkyPortal:
        with open('kowalski/config.yaml') as cyaml:
            config = yaml.load(cyaml, Loader=yaml.FullLoader)

        token = generate_skyportal_token()
        config['kowalski']['skyportal']['token'] = token

        with open('kowalski/config.yaml', 'w') as cyaml:
            yaml.dump(config, cyaml)

        # Build kowalski's images
        c = ["python", "kowalski.py", "build", "--fritz"]
        if args.yes:
            c.append("--yes")
        p = subprocess.run(c, cwd="kowalski")
        if p.returncode != 0:
            raise RuntimeError("Failed to build kowalski's docker images")

    # start up kowalski
    c = ["python", "kowalski.py", "up", "--fritz"]
    if args.yes:
        c.append("--yes")
    p = subprocess.run(c, cwd="kowalski")
    if p.returncode != 0:
        raise RuntimeError("Failed to start kowalski")


def stop(args):
    """
    Shut down Fritz
    """
    print('Shutting fritz down...')
    subprocess.run(["python", "kowalski.py", "down", "--fritz"], cwd="kowalski")
    subprocess.run(["docker-compose", "down"], cwd="skyportal")


def log(args):
    """
    Show colorized logs while the marshal is running
    """
    p = subprocess.run(["make", "log"], cwd="skyportal")
    if p.returncode != 0:
        raise RuntimeError("Failed to display fritz's logs")


def develop(args=None):
    """
    Install developer tools.
    """
    subprocess.run(["pre-commit", "install"])


def lint(args):
    try:
        import pre_commit  # noqa: F401
    except ImportError:
        develop()

    subprocess.run(["pre-commit", "run", "--all-files"])


def prune(args):
    """
    Prune fritz's docker containers and volumes and reset configs to defaults
    """
    go = input(
        f"Do you want to prune fritz's docker containers and volumes and deinit submodules? [y/N] "
    ) if not args.yes else 'y'

    if go.lower() == 'y':
        # try stopping anything that's running first:
        stop(args)

        # remove docker images
        for image_name in ('kowalski_api', 'kowalski_ingester', 'skyportal/web'):
            p1 = subprocess.Popen(['docker', 'images'], stdout=subprocess.PIPE)
            p2 = subprocess.Popen(['grep', image_name], stdin=p1.stdout, stdout=subprocess.PIPE)
            image_id = subprocess.check_output(['awk', '{print $3}'], stdin=p2.stdout, universal_newlines=True).strip()
            p3 = subprocess.run(['docker', 'rmi', image_id])
            if p3.returncode == 0:
                print(f'Removed {image_name} docker image')
            else:
                print(f'Failed to remove {image_name} docker image')

        # remove docker volumes
        for volume_name in ('kowalski_data', 'kowalski_mongodb', 'skyportal_dbdata'):
            p = subprocess.run(['docker', 'volume', 'rm', volume_name])
            if p.returncode == 0:
                print(f'Removed {volume_name} docker volume')
            else:
                print(f'Failed to remove {volume_name} docker volume')

        # deinit submodules
        p = subprocess.run(['git', 'submodule', 'deinit', '--all', '-f'])
        if p.returncode == 0:
            print(f"Deinitialized fritz's submodules")
        else:
            print(f"Failed to deinit fritz's submodules")


def test(args):
    print("Launching tests...")

    # load_demo_data is run as part of ./fritz run --init since it is needed to create a token for kowalski

    print("Testing Kowalski...")
    subprocess.run(["python", "kowalski.py", "test"], cwd="kowalski")


def doc(args):
    subprocess.run(["make", "html"], cwd="doc", check=True)
    Path("doc/_build/html/.nojekyll").touch()

    if args.upload:
        subprocess.run(
            [
                "./tools/push_dir_to_repo.py",
                "--branch",
                "master",
                "--committer",
                "fritz",
                "--email",
                "fritz@fritz-marshal.org",
                "--message",
                "Update website",
                "--force",
                "./doc/_build/html",
                "git@github.com:fritz-marshal/doc",
            ],
            check=True
        )


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers(title="commands", dest="command")

    parent_parser = argparse.ArgumentParser(add_help=False)
    parent_parser.add_argument(
        "--yes", action="store_true", help="Answer yes for all questions"
    )

    commands = [
        ("run", "üöÄ Launch Fritz"),
        ("stop", "‚úã Shut Fritz down"),
        ("test", "Run the test suite"),
        ("develop", "Install tools for developing Fritz"),
        ("lint", "Lint the full code base"),
        ("prune", "‚ò†Ô∏è Wipe out containers, volumes, and submodules"),
        ("doc", "Build the documentation"),
        ("help", "Print this message"),
    ]

    parsers = {}
    for (cmd, desc) in commands:
        parsers[cmd] = subparsers.add_parser(cmd, help=desc, parents=[parent_parser])

    parsers["run"].add_argument(
        "--init", action="store_true", help="Initialize Fritz"
    )

    parsers["doc"].add_argument(
        "--upload", action="store_true", help="Upload documentation to GitHub"
    )

    args = parser.parse_args()
    if args.command is None or args.command == "help":
        parser.print_help()
    else:
        getattr(sys.modules[__name__], args.command)(args)
