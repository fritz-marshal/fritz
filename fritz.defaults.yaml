skyportal:
  app:
    title: Fritz
    logos: # Logos to place in the top-left of the header bar (zero or more)
      - src: /static/images/GROWTH_logo.png
        alt_text: GROWTH logo
      - src: /static/images/skyportal_logo_dark.png
        alt_text: Skyportal logo

    # This secret key can be any random string of
    # characters.
    #
    # You should re-generate this for your application
    # using:
    #
    # base64.b64encode(os.urandom(50)).decode('ascii')
    secret_key: abc01234
    factory: skyportal.app_server_fritz.make_app_fritz

    # this endpoint does not actually do anything -- it is just for testing
    sedm_endpoint: http://minar.caltech.edu/add_fritz

    lt_host: 161.72.57.3
    lt_port: 8080

    lco_protocol: https
    lco_host: observe.lco.global
    lco_port: 443

    ztf:
      protocol: https
      host: kowalski.caltech.edu
      port: 443

    ztf_forced_endpoint: https://ztfweb.ipac.caltech.edu

    swift:
      protocol: https
      host: www.swift.psu.edu
      port: 443

    ps1_endpoint: https://catalogs.mast.stsci.edu/

    atlas:
      protocol: https
      host: fallingstar-data.com

    kait:
      protocol: http
      host: herculesii.astro.berkeley.edu

    treasuremap_endpoint: http://treasuremap.space

    # See https://stackoverflow.com/a/35604855 for syntax
    # These are Javascript component routes
    routes:
      - path: "/"
        component: HomePage
        exact: True
      - path: "/source/:id"
        component: Source
      - path: "/favorites"
        component: FavoritesPage
      - path: "/groups"
        component: Groups
      - path: "/group/:id"
        component: Group
      - path: "/profile"
        component: Profile
      - path: "/candidates"
        component: CandidateList
      - path: "/sources"
        component: SourceList
      - path: "/user/:id"
        component: UserInfo
      - path: "/upload_photometry/:id"
        component: UploadPhotometry
      - path: "/about"
        component: About
      - path: "/manage_data/:id"
        component: ManageDataForm
      - path: "/filter/:fid"
        component: Filter
      - path: "/runs"
        component: ObservingRunPage
      - path: "/run/:id"
        component: RunSummary
      - path: "/allocations"
        component: AllocationPage
      - path: "/group_sources/:id"
        component: GroupSources
      - path: "/user_management"
        component: UserManagement
      - path: "/alerts"
        component: Alerts
      - path: "/alerts/ztf/:id"
        component: ZTFAlert
      - path: "/archive"
        component: Archive
      - path: "/upload_spectrum/:id"
        component: UploadSpectrum
      - path: "/source/:id/finder"
        component: FindingChart
      - path: "/observability/:id"
        component: Observability
      - path: "/source/:id/periodogram"
        component: Periodogram
      - path: "/db_stats"
        component: DBStats
      - path: "/gcn_events"
        component: GcnEvents
      - path: "/gcn_events/:dateobs"
        component: GcnEventPage
      - path: "/telescopes"
        component: TelescopePage
      - path: "/instruments"
        component: InstrumentPage
      - path: "/shifts"
        component: ShiftPage
      - path: "/observations"
        component: ObservationPage
      - path: "/followup_requests"
        component: FollowupRequestPage


    kowalski:
      protocol: http
      host: kowalski_api_1
      port: 4000
      token:
    # a (dedicated) Kowalski instance holding the ZTF light curve data referred to as Gloria
    gloria:
      protocol: http
      host: kowalski_api_1
      port: 4000
      token:

    sidebar:
      # See https://material-ui.com/components/material-icons/
      - name: main
        subitems:
          - name: Dashboard
            icon: Home
            url: /

          - name: Sources
            icon: Storage
            url: /sources

          - name: Candidates
            icon: Search
            url: /candidates

          - name: Favorites
            icon: Star
            url: /favorites

          - name: Alerts
            icon: Explore
            url: /alerts

          - name: Archive
            icon: CloudCircle
            url: /archive

          - name: Groups
            icon: GroupWork
            url: /groups

          - name: Observing Runs
            icon: LocalCafe
            url: /runs

          - name: GCN Events
            icon: SettingsInputAntenna
            url: /gcn_events

          - name: Followup Requests
            icon: WorkOutlined
            url: /followup_requests

          - name: Shifts
            icon: SubwayRounded
            url: /shifts

          - name: About
            icon: Info
            url: /about

      - name: Other
        subitems:
          - name: Telescopes
            icon: MyLocation
            url: /telescopes

          - name: Instruments
            icon: Wifi
            url: /instruments

          - name: Allocations
            icon: HourglassEmptyOutlined
            url: /allocations

          - name: Observations
            icon: ZoomInOutlined
            url: /observations

      - name: Admin
        permissions: ["Manage users", "System admin"]
        subitems:
          - name: DB Stats
            icon: Assessment
            permissions: ["System admin"]
            url: /db_stats
          - name: User Management
            icon: Group
            permissions: ["Manage users", "System admin"]
            url: /user_management

    security:
      strict: true
      slack:
        enabled: false
        url: null

    homepage_grid:
      # This section describes the grid on which Home Page widgets are laid out.
      #
      # The breakpoints describe screen sizes at which a different set of widget
      # layouts should be used. Note that these breakpoints describe minimum width
      # values, unlike the maximum width bounds used by Material UI breakpoints.
      # For example, a breakpoint of "sm: 650" will match windows with width 650px
      # or greater, until the next highest breakpoint is hit (probably a "md").
      # This is different from Material UI, where a breakpoint of 650 would match
      # window widths that are at most 650px.
      #
      # The cols describe the number of evenly spaced columns that make up the
      # grid at a given breakpoint. For example, on extra-large screens (greater
      # than ${breakpoints.xlg} pixels), the grid will use ${cols.xlg} columns of
      # equal width to describe sizes of widgets based on the layouts provided.
      #
      # Optionally, you may provide a "row_height: {a rem value}" property in
      # this section to change the height of a row on the grid. By default, this
      # value is 9.375rem (150px for the default 16px = 1rem configuration).

      breakpoints:
        xlg: 1400
        lg: 1150
        md: 996
        sm: 650
        xs: 0

      cols:
        xlg: 16
        lg: 12
        md: 10
        sm: 6
        xs: 4

    homepage_widgets:
      # This section describes the specific widgets shown on the Home Page and how
      # they are laid out by default on the grid of the page.
      #
      # The name of section should be the same as the widget's React component.
      #
      # The props property should be a set of properties to be passed on to the
      # underlying React component for the widget. You may run into cases in which
      # you must pass a more complex, dyamic property (perhaps fetched from the
      # application redux store). Since you can not know that in the time of the
      # configuration writing, such properties should be directly coded into the
      # HomePage.jsx.template file (see the GroupList widget for an example)
      #
      # By default, any widget listed here is shown on the Home Page. However, you
      # can give a widget the property "show: false" to turn off rendering of the
      # widget.
      #
      # The resizable property determines whether the user is able to resize the
      # widget after it has been rendered based on default layouts.
      #
      # Finally, the layouts property provides an array of default sizes/locations
      # for each screen width breakpoint for the given widget. Layout arrays are
      # given in the order [x, y, width, height], in units of grid columns/rows.
      # For example, a layout array of [1, 2, 3, 4] will render a widget 3 grid
      # columns in width, 4 grid rows in height, and have its upper-left corner at
      # the column 1 (zero-indexed) and row 2. Note that each row is by default
      # 150px in height. The row height can be altered in the homepage_grid
      # section above (as well as other grid characteristics).
      WeatherWidget:
        resizeable: true
        minW: 2
        layouts:
          xlg: [0, 10, 4, 1]
          lg: [0, 10, 4, 1]
          md: [0, 10, 4, 1]
          sm: [0, 10, 4, 1]
          xs: [0, 12, 4, 1]

      SourceCounts:
        props:
          sinceDaysAgo: 7
        resizeable: true
        minW: 1.5
        layouts:
          xlg: [14, 0, 2, 1]
          lg: [10, 0, 2, 1]
          md: [8, 0, 2, 1]
          sm: [4.5, 0, 1.5, 1]
          xs: [0, 0, 4, 1]

      RecentSources:
        resizeable: true
        minW: 2
        layouts:
          xlg: [0, 0, 5, 3]
          lg: [0, 0, 4, 3]
          md: [0, 3, 5, 3]
          sm: [0, 3, 3, 3]
          xs: [0, 4, 4, 3]

      NewsFeed:
        resizeable: true
        minW: 2
        layouts:
          xlg: [10, 0, 4, 3]
          lg: [7, 0, 3, 3]
          md: [0, 0, 8, 3]
          sm: [0, 0, 4.5, 3]
          xs: [0, 1, 4, 3]

      TopSources:
        resizeable: true
        minW: 2
        layouts:
          xlg: [5, 0, 5, 3]
          lg: [4, 3, 3, 3]
          md: [5, 3, 5, 3]
          sm: [3, 3, 3, 3]
          xs: [0, 7, 4, 3]

      GroupList:
        props:
          title: My Groups
        resizeable: true
        minW: 1.5
        layouts:
          xlg: [14, 1, 2, 2]
          lg: [10, 1, 2, 2]
          md: [8, 1, 2, 2]
          sm: [4.5, 1, 1.5, 2]
          xs: [0, 10, 4, 2]

  database:
    database: skyportal
    host: db
    port: 5432
    user: skyportal
    password: password

  server:
    # From https://console.developers.google.com/
    #
    # - Create Client ID
    # - Javascript origins: https://localhost:5000
    # - Authorized redirect URLs: http://localhost:5000/complete/google-oauth2/
    #
    # You need to have Google+ API enabled; it takes a few minutes to activate.

    host: <host>
    port:

    # It is recommended to use TLS in production
    ssl: False
    processes: 4

    # Rate limit: number of requests per second (see https://www.nginx.com/blog/rate-limiting-nginx/)
    rate_limit: 5
    # Rate limit burst size (https://www.nginx.com/blog/rate-limiting-nginx/#bursts)
    burst: 10

    # In addition to the local network, specify any IP addresses that are to be
    # exempt from API rate limiting
    whitelisted_ips:
      # Class A private network
      - 10.0.0.0/8
      # Class B private network
      - 172.16.0.0/12
      # Class C private network
      - 192.168.0.0/16
      # skipper.caltech.edu
      - 131.215.198.228
      # kowalski.caltech.edu
      - 131.215.198.229

    # Specify IPs or address ranges (e.g., 130.211.0.0/22) that are associated
    # with upstream load balancing.
    # These trusted addresses are used to uncover the originating IP.
    loadbalancer_ips:
      # Google Load Balancer IPs
      # See https://cloud.google.com/load-balancing/docs/https#x-forwarded-for_header
      - 130.211.0.0/22
      - 35.191.0.0/16
      # preview.fritz.science
      - 34.120.0.80
      # fritz.science
      - 35.244.192.22

    auth:
      debug_login: True
      google_oauth2_key:
      google_oauth2_secret:

  services:
    dask: False

  misc:
    days_to_keep_unsaved_candidates: 7
    public_group_name: "Sitewide Group"
    minutes_to_keep_candidate_query_cache: 120
    # Use a named cosmology from `astropy.cosmology.parameters.available` cosmologies
    # or supply the arguments for an `astropy.cosmology.FLRW` cosmological instance.
    # If {"flat": True} then use a subclass of the FLRW, called `FlatLambdaCMD`
    # otherwise use `LambdaCDM`. See `utils.cosmology.py` for the way in which
    # the user-supplied cosmology parameter set constructs the site-wide cosmology.
    cosmology: Planck18_arXiv_v2
    #cosmology: {H0: "65.0", Om0: 0.3, Ode0: 0.7, name: 'skyportal_user_cosmo'}

  external_logging:
    papertrail:
      # get an account at https://papertrailapp.com
      enabled: False
      # change url to the correct subdomain for your account
      # and change the port as well
      url:
      port:
      # which log files, if any do you not want to send over to the 3rd party?
      excluded_log_files: ["log/websocket_server.log"]

  weather:
    refresh_time: 3600.0
    openweather_api_key:

  cron: []
#    - interval: 60
#      script: jobs/count_unsaved_candidates.py
    # - interval: 1440
    #   script: jobs/delete_unsaved_candidates.py
    #   limit: ["01:00", "02:00"]

  twilio:
    # Twilio Sendgrid API configs
    # This needs to be set to a valid, Sendgrid-registered address in config.yaml
    from_email:
    # This needs to be obtained via Sendgrid setup on their site
    sendgrid_api_key:

    # Twilio SMS API configs
    # These values must be valid ones from the Twilio API console
    from_number:
    sms_account_sid:
    sms_auth_token:

  smtp:
    from_email:
    password:
    host:
    port:

  # This value needs to be either "sendgrid" or "smtp" (without quotes)
  email_service: sendgrid

  invitations:
    enabled: False # If debug_login=True above, invite tokens won't be used during auth
    days_until_expiry: 3
    email_subject: "You have been invited to collaborate on Fritz"
    email_body_preamble: | # This can include HTML tags
      Welcome to <b>Fritz</b>!
      <br />
      Dark star crashes, pouring its light into ashes.

  notifications:
    enabled: True

  standard_stars:
    ZTF: data/ztf_standards.csv
    ESO: data/eso_standards.csv

  # Parameters for the thumbnail classification function which labels
  # images as grayscale or colored. See utils/thumbnail.py for the function.
  image_grayscale_params:
    thumb_size: 40
    MSE_cutoff: 22
    adjust_color_bias: True

  slack:
    microservice_port: 64100
    expected_url_preamble: "https://hooks.slack.com/"

  spectrum_types:
    types:
      - source
      - host
      - host_center
    default: source

  # define the additional passbands that are not in SNCosmo
  # (https://sncosmo.readthedocs.io/en/stable/bandpass-list.html)
  # the names must be unique. The wavelength array should
  # describe the full extent of the bandpass in Angstrom
  # and the transmission should be a vector of the same
  # length that defines the full Quantum Efficiency at each wavelength.
  # must have at least two elements in the arrays
  # `wavelength` and `transmission`.
  # additional_bandpasses:
  #  - name: 'atlasc'
  #    filterset: 'atlas'
  #    wavelength: [4150, 4157, 6556, 6560]
  #    transmission: [0, 1, 1, 0]
  #    description: "basic ATLAS C filter - tophat transmission"
  #  - name: 'atlaso'
  #    filterset: 'atlas'
  #    wavelength: [5580, 5582, 8249, 8250]
  #    transmission: [0, 1, 1, 0]
  #    description: "basic ATLAS O filter - tophat transmission"

kowalski:
  server:
    name: "Kowalski"
    version: "2.0.0"
    description: "Kowalski: a toolkit for Time-Domain Astronomy"
    host: "0.0.0.0"
    port: 4000
    admin_username: "admin"
    # fixme: use ''.join(secrets.choice(string.ascii_lowercase + string.digits) for _ in range(32))
    admin_password: "admin"
    # fixme: use ''.join(secrets.choice(string.ascii_lowercase + string.digits) for _ in range(32))
    SECRET_KEY: "abc0123"
    JWT_SECRET_KEY: "abc0123"
    JWT_ALGORITHM: "HS256"
    JWT_EXP_DELTA_SECONDS:
    # fixme: use from cryptography.fernet import Fernet; Fernet.generate_key().decode()
    fernet_key: "irjsxvfJdqSJ2fcnpPacbH972dt-RPMMLE48PQ8J5Hg="

  ztf:
    mountain_ip: null
    mountain_port: null
    mountain_username: null
    mountain_password: null
    mountain_bind_ip: null
    mountain_bind_port: null

  path:
    app: "/app"
    docs: "/app/docs"
    ml_models_ztf: "/app/models/"
    ml_models_pgir: "/app/models_pgir/"
    logs: "/data/logs/"
    data: "/data"
    queries: "/data/queries"
    tess: "/data/tess"
    tmp: "/_tmp"
    kafka: "/kafka_2.13-2.5.0"

  kafka:
    default.topic.config:
      auto.offset.reset: "earliest"
    group: "fritz"

    bootstrap.servers: "192.168.0.64:9092,192.168.0.65:9092,192.168.0.66:9092"
    zookeeper: "192.168.0.64:2181"
    bootstrap.test.servers: "localhost:9092"
    zookeeper.test: "localhost:2181"

  database:
    max_pool_size: 200
    host: "kowalski_mongo_1"
    port: 27017
    # if not null, must be same as in entrypoint of mongo container
    replica_set: "rs0"
    db: "kowalski"
    admin_username: "mongoadmin"
    # fixme: use strong password if exposing the database to the world
    admin_password: "mongoadminsecret"
    username: "ztf"
    # fixme: use strong password if exposing the database to the world
    password: "ztf"

    build_indexes: True

    collections:
      users: "users"
      filters: "filters"
      queries: "queries"
      alerts_ztf: "ZTF_alerts"
      alerts_ztf_aux: "ZTF_alerts_aux"
      alerts_zuds: "ZUDS_alerts"
      alerts_zuds_aux: "ZUDS_alerts_aux"
      tns: "TNS"
      alerts_pgir: "PGIR_alerts"
      alerts_pgir_aux: "PGIR_alerts_aux"

    indexes:
      ZTF_alerts:
        - name: radec_candid
          fields:
            - ["coordinates.radec_geojson", "2dsphere"]
            - ["candid", -1]
          unique: false
        - name: radec_objectId
          fields:
            - ["coordinates.radec_geojson", "2dsphere"]
            - ["objectId", -1]
          unique: false
        - name: jd_radec_candid
          fields:
            - ["candidate.jd", 1]
            - ["coordinates.radec_geojson", "2dsphere"]
            - ["candid", -1]
          unique: false
        - name: jd_radec_objectId
          fields:
            - ["candidate.jd", 1]
            - ["coordinates.radec_geojson", "2dsphere"]
            - ["objectId", -1]
          unique: false
        - name: objectId
          fields:
            - ["objectId", -1]
          unique: false
        - name: candid
          fields:
            - ["candid", -1]
          unique: true
        - name: pid
          fields:
            - ["candidate.pid", 1]
          unique: false
        - name: objectId_pid
          fields:
            - ["objectId", -1]
            - ["candidate.pid", 1]
          unique: false
        - name: pdiffimfilename
          fields:
            - ["candidate.pdiffimfilename", 1]
          unique: false
        - name: jd_programid_programpi
          fields:
            - ["candidate.jd", 1]
            - ["candidate.programid", 1]
            - ["candidate.programpi", 1]
          unique: false
        - name: jd_braai_candid
          fields:
            - ["candidate.jd", -1]
            - ["classifications.braai", -1]
            - ["candid", -1]
          unique: false
        - name: jd_drb_candid
          fields:
            - ["candidate.jd", -1]
            - ["candidate.drb", -1]
            - ["candid", -1]
          unique: false
        - name: jd_braai_magpsf_isdiffpos_ndethist
          fields:
            - ["candidate.jd", 1]
            - ["classifications.braai", 1]
            - ["candidate.magpsf", 1]
            - ["candidate.isdiffpos", 1]
            - ["candidate.ndethist", 1]
          unique: false
        - name: jd_field_drb_ndethhist_magpsf_isdiffpos_objectId
          fields:
            - ["candidate.jd", 1]
            - ["candidate.field", 1]
            - ["candidate.rb", 1]
            - ["candidate.drb", 1]
            - ["candidate.ndethist", 1]
            - ["candidate.magpsf", 1]
            - ["candidate.isdiffpos", 1]
            - ["objectId", -1]
          unique: false

      TNS:
        - name: radec__id
          fields:
            - ["coordinates.radec_geojson", "2dsphere"]
            - ["_id", -1]
          unique: false
        - name: discovery_date
          fields:
            - ["discovery_date", -1]
          unique: false

      PGIR_alerts:
        - name: radec_candid
          fields:
            - [ "coordinates.radec_geojson", "2dsphere" ]
            - [ "candid", -1 ]
          unique: false
        - name: radec_objectId
          fields:
            - [ "coordinates.radec_geojson", "2dsphere" ]
            - [ "objectId", -1 ]
          unique: false
        - name: jd_radec_candid
          fields:
            - [ "candidate.jd", 1 ]
            - [ "coordinates.radec_geojson", "2dsphere" ]
            - [ "candid", -1 ]
          unique: false
        - name: jd_radec_objectId
          fields:
            - [ "candidate.jd", 1 ]
            - [ "coordinates.radec_geojson", "2dsphere" ]
            - [ "objectId", -1 ]
          unique: false
        - name: objectId
          fields:
            - [ "objectId", -1 ]
          unique: false
        - name: candid
          fields:
            - [ "candid", -1 ]
          unique: true
        - name: jd_drb_candid
          fields:
            - [ "candidate.jd", -1 ]
            - [ "candidate.drb", -1 ]
            - [ "candid", -1 ]
          unique: false
        - name: jd_drb_ndethist_dmag2mass_isstar_distnearbrstar
          fields:
            - [ "candidate.jd", -1 ]
            - [ "candidate.drb", -1 ]
            - [ "candidate.ndethist", 1 ]
            - [ "candidate.dmag2mass", -1 ]
            - [ "candidate.isstar", -1 ]
            - [ "candidate.distnearbrstar", 1 ]
          unique: false
        - name: jd_scorr_dmag2mass
          fields:
            - [ "candidate.jd", -1 ]
            - [ "candidate.scorr", -1 ]
            - [ "candidate.dmag2mass", -1 ]
          unique: false

    filters:
      ZTF_alerts:
        # default upstream aggregation pipeline stages for filtering ZTF alerts:
        - {
            "$match":
              { "candid": null, "candidate.programid": { "$in": null } },
          }
        - {
            "$project":
              {
                "cutoutScience": 0,
                "cutoutTemplate": 0,
                "cutoutDifference": 0,
              },
          }
        - {
            "$lookup":
              {
                "from": "ZTF_alerts_aux",
                "localField": "objectId",
                "foreignField": "_id",
                "as": "aux",
              },
          }
        - {
            "$project":
              {
                "cross_matches": { "$arrayElemAt": ["$aux.cross_matches", 0] },
                "prv_candidates":
                  {
                    "$filter":
                      {
                        "input": { "$arrayElemAt": ["$aux.prv_candidates", 0] },
                        "as": "item",
                        "cond":
                          {
                            "$and":
                              [
                                { "$in": ["$$item.programid", null] },
                                {
                                  "$lt":
                                    [
                                      {
                                        "$subtract":
                                          ["$candidate.jd", "$$item.jd"],
                                      },
                                      3650,
                                    ],
                                },
                              ],
                          },
                      },
                  },
                "schemavsn": 1,
                "publisher": 1,
                "objectId": 1,
                "candid": 1,
                "candidate": 1,
                "classifications": 1,
                "coordinates": 1,
              },
          }

      PGIR_alerts:
        # default upstream aggregation pipeline stages for filtering PGIR alerts:
        - {
          "$match":
            {
              "candid": null
            },
        }
        - {
          "$project":
            {
              "cutoutScience": 0,
              "cutoutTemplate": 0,
              "cutoutDifference": 0,
            },
        }
        - {
          "$lookup":
            {
              "from": "PGIR_alerts_aux",
              "localField": "objectId",
              "foreignField": "_id",
              "as": "aux",
            },
        }
        - {
          "$project":
            {
              "cross_matches": { "$arrayElemAt": [ "$aux.cross_matches", 0 ] },
              "prv_candidates":
                {
                  "$filter":
                    {
                      "input": { "$arrayElemAt": [ "$aux.prv_candidates", 0 ] },
                      "as": "item",
                      "cond":
                        {
                          "$lt":
                            [
                              {
                                "$subtract":
                                  [ "$candidate.jd", "$$item.jd" ],
                              },
                                1000,
                            ],
                        },
                    },
                },
              "schemavsn": 1,
              "publisher": 1,
              "objectId": 1,
              "candid": 1,
              "candidate": 1,
              "classifications": 1,
              "coordinates": 1,
            },
        }

    xmatch:
      ZTF:
        2MASS_PSC:
          cone_search_radius: 2
          cone_search_unit: "arcsec"
          filter: { }
          projection:
            _id: 1
            coordinates.radec_str: 1
            j_m: 1
            h_m: 1
            k_m: 1

        AllWISE:
          cone_search_radius: 2
          cone_search_unit: "arcsec"
          filter: { }
          projection:
            _id: 1
            coordinates.radec_str: 1
            w1mpro: 1
            w1sigmpro: 1
            w2mpro: 1
            w2sigmpro: 1
            w3mpro: 1
            w3sigmpro: 1
            w4mpro: 1
            w4sigmpro: 1
            ph_qual: 1

        Gaia_DR2:
          cone_search_radius: 2
          cone_search_unit: "arcsec"
          filter: { }
          projection:
            _id: 1
            coordinates.radec_str: 1
            parallax: 1
            parallax_error: 1
            phot_g_mean_mag: 1
            phot_bp_mean_mag: 1
            phot_rp_mean_mag: 1

        Gaia_EDR3:
          cone_search_radius: 2
          cone_search_unit: "arcsec"
          filter: { }
          projection:
            _id: 1
            coordinates.radec_str: 1
            parallax: 1
            parallax_error: 1
            phot_g_mean_mag: 1
            phot_bp_mean_mag: 1
            phot_rp_mean_mag: 1

        Gaia_DR2_WD:
          cone_search_radius: 2
          cone_search_unit: "arcsec"
          filter: { }
          projection:
            _id: 1
            coordinates.radec_str: 1
            White_dwarf_name: 1
            Pwd: 1
            Pwd_correction: 1
            SDSS_name: 1
            Teff: 1
            eTeff: 1

        PS1_STRM:
          cone_search_radius: 2
          cone_search_unit: "arcsec"
          filter: { }
          projection:
            _id: 1
            objID: 1
            coordinates.radec_str: 1
            class: 1
            prob_Galaxy: 1
            prob_Star: 1
            prob_QSO: 1
            z_phot: 1
            z_phot_err: 1

        galaxy_redshifts_20200522:
          cone_search_radius: 2
          cone_search_unit: "arcsec"
          filter: { }
          projection:
            _id: 1
            coordinates.radec_str: 1
            z: 1
            l: 1
            b: 1

        GALEX:
          cone_search_radius: 2
          cone_search_unit: "arcsec"
          filter: { }
          projection:
            _id: 0
            name: 1
            coordinates.radec_str: 1
            FUVmag: 1
            e_FUVmag: 1
            NUVmag: 1
            e_NUVmag: 1

        IGAPS_DR2:
          cone_search_radius: 2
          cone_search_unit: "arcsec"
          filter: { }
          projection:
            _id: 0
            name: 1
            coordinates.radec_str: 1
            r: 1
            rErr: 1
            i: 1
            iErr: 1
            ha: 1
            haErr: 1
            U_RGO: 1
            UErr: 1

        LAMOST_DR5_v3:
          cone_search_radius: 2
          cone_search_unit: "arcsec"
          filter: { }
          projection:
            _id: 1
            coordinates.radec_str: 1
            mjd: 1
            snru: 1
            snrg: 1
            snrr: 1
            snri: 1
            snrz: 1
            objtype: 1
            class: 1
            subclass: 1

        PS1_DR1:
          cone_search_radius: 2
          cone_search_unit: "arcsec"
          filter: { }
          projection:
            _id: 1
            coordinates.radec_str: 1
            gMeanPSFMag: 1
            gMeanPSFMagErr: 1
            rMeanPSFMag: 1
            rMeanPSFMagErr: 1
            iMeanPSFMag: 1
            iMeanPSFMagErr: 1
            zMeanPSFMag: 1
            zMeanPSFMagErr: 1
            yMeanPSFMag: 1
            yMeanPSFMagErr: 1

      PGIR:
        2MASS_PSC:
          cone_search_radius: 8
          cone_search_unit: "arcsec"
          filter: { }
          projection:
            _id: 1
            coordinates.radec_str: 1
            j_m: 1
            h_m: 1
            k_m: 1

        AllWISE:
          cone_search_radius: 8
          cone_search_unit: "arcsec"
          filter: { }
          projection:
            _id: 1
            coordinates.radec_str: 1
            w1mpro: 1
            w1sigmpro: 1
            w2mpro: 1
            w2sigmpro: 1
            w3mpro: 1
            w3sigmpro: 1
            w4mpro: 1
            w4sigmpro: 1
            ph_qual: 1

        Gaia_DR2:
          cone_search_radius: 8
          cone_search_unit: "arcsec"
          filter: { }
          projection:
            _id: 1
            coordinates.radec_str: 1
            parallax: 1
            parallax_error: 1
            phot_g_mean_mag: 1
            phot_bp_mean_mag: 1
            phot_rp_mean_mag: 1

        Gaia_EDR3:
          cone_search_radius: 8
          cone_search_unit: "arcsec"
          filter: { }
          projection:
            _id: 1
            coordinates.radec_str: 1
            parallax: 1
            parallax_error: 1
            phot_g_mean_mag: 1
            phot_bp_mean_mag: 1
            phot_rp_mean_mag: 1

        PS1_STRM:
          cone_search_radius: 8
          cone_search_unit: "arcsec"
          filter: { }
          projection:
            _id: 1
            objID: 1
            coordinates.radec_str: 1
            class: 1
            prob_Galaxy: 1
            prob_Star: 1
            prob_QSO: 1
            z_phot: 1
            z_phot_err: 1

        galaxy_redshifts_20200522:
          cone_search_radius: 8
          cone_search_unit: "arcsec"
          filter: { }
          projection:
            _id: 1
            coordinates.radec_str: 1
            z: 1
            l: 1
            b: 1

        GALEX:
          cone_search_radius: 8
          cone_search_unit: "arcsec"
          filter: { }
          projection:
            _id: 0
            name: 1
            coordinates.radec_str: 1
            FUVmag: 1
            e_FUVmag: 1
            NUVmag: 1
            e_NUVmag: 1

        IGAPS_DR2:
          cone_search_radius: 8
          cone_search_unit: "arcsec"
          filter: { }
          projection:
            _id: 0
            name: 1
            coordinates.radec_str: 1
            r: 1
            rErr: 1
            i: 1
            iErr: 1
            ha: 1
            haErr: 1
            U_RGO: 1
            UErr: 1

        LAMOST_DR5_v3:
          cone_search_radius: 8
          cone_search_unit: "arcsec"
          filter: { }
          projection:
            _id: 1
            coordinates.radec_str: 1
            mjd: 1
            snru: 1
            snrg: 1
            snrr: 1
            snri: 1
            snrz: 1
            objtype: 1
            class: 1
            subclass: 1

        PS1_DR1:
          cone_search_radius: 8
          cone_search_unit: "arcsec"
          filter: { }
          projection:
            _id: 1
            coordinates.radec_str: 1
            gMeanPSFMag: 1
            gMeanPSFMagErr: 1
            rMeanPSFMag: 1
            rMeanPSFMagErr: 1
            iMeanPSFMag: 1
            iMeanPSFMagErr: 1
            zMeanPSFMag: 1
            zMeanPSFMagErr: 1
            yMeanPSFMag: 1
            yMeanPSFMagErr: 1

  ml_models:
    ZTF:
      braai:
        version: "d6_m9"
      acai_h:
        version: "d1_dnn_20201130"
      acai_v:
        version: "d1_dnn_20201130"
      acai_o:
        version: "d1_dnn_20201130"
      acai_n:
        version: "d1_dnn_20201130"
      acai_b:
        version: "d1_dnn_20201130"

  skyportal:
    protocol: "http"
    host: skyportal_web_1
    port: 5000
    username: kowalski
    token: <token>

  ztf_depot:
    # fixme:
    username: "username"
    password: "password"

  ztf_ops:
    # fixme: Tom Barlow's ops db
    url: "http://site/allexp.tbl"
    username: "username"
    password: "password"

  dask:
    host: 127.0.0.1
    scheduler_port: 8786
    dashboard_address: :8787
    n_workers: 4
    threads_per_worker: 1
    lifetime: 24 hours
    lifetime_stagger: 1 hours
    lifetime_restart: true

  dask_pgir:
    host: 127.0.0.1
    scheduler_port: 8788
    dashboard_address: :8789
    n_workers: 4
    threads_per_worker: 1
    lifetime: 24 hours
    lifetime_stagger: 1 hours
    lifetime_restart: true

  tns:
    api_key:
    bot_id: 31415926
    bot_name: Null
    url: https://wis-tns.org

  misc:
    broker: True
    supported_penquins_versions: ["2.0.0", "2.0.1", "2.0.2", "2.1.0", "2.1.1"]
    query_expiration_interval: 5
    max_time_ms: 300000
    max_retries: 100
    logging_level: "debug"
    openapi_validate: False

  slack:
    # Used by the performance_reporter.py task to post Slack messages
    slack_bot_token:
    slack_channel_id:

  # this is used to make supervisord.conf files at build time
  supervisord:
    api:
      unix_http_server:
        file: /dev/shm/supervisor.sock

      supervisord:
        logfile: /data/logs/supervisord.log
        logfile_maxbytes: 50MB
        logfile_backups: 20
        loglevel: info
        pidfile: /tmp/supervisord.pid
        nodaemon: True
        minfds: 1024
        minprocs: 200

      "rpcinterface:supervisor":
        "supervisor.rpcinterface_factory": supervisor.rpcinterface:make_main_rpcinterface

      supervisorctl:
        serverurl: unix:///dev/shm/supervisor.sock

      "program:gunicorn":
        # fixme: adjust number of workers -w for your system
        command: >
          /usr/local/bin/gunicorn
          -w 2
          --bind 0.0.0.0:4000
          --worker-tmp-dir /dev/shm
          --worker-class aiohttp.GunicornUVLoopWebWorker
          --log-level=DEBUG
          --timeout 36000
          --max-requests 100000
          api:app_factory
        directory: /app
        user: root
        autostart: true
        autorestart: true
        stdout_logfile: /data/logs/gunicorn_stdout.log
        stdout_logfile_maxbytes: 30MB
        stderr_logfile: /data/logs/gunicorn_stderr.log
        redirect_stderr: True
        environment: "PRODUCTION=1"

    ingester:
      unix_http_server:
        file: /dev/shm/supervisor.sock

      supervisord:
        logfile: /data/logs/supervisord.log
        logfile_maxbytes: 50MB
        logfile_backups: 20
        loglevel: info
        pidfile: /tmp/supervisord.pid
        nodaemon: True
        minfds: 1024
        minprocs: 200

      "rpcinterface:supervisor":
        "supervisor.rpcinterface_factory": supervisor.rpcinterface:make_main_rpcinterface

      supervisorctl:
        serverurl: unix:///dev/shm/supervisor.sock

      "program:dask-cluster":
        command: /usr/local/bin/python dask_cluster.py
        directory: /app
        user: root
        autostart: true
        autorestart: true
        stdout_logfile: /data/logs/dask_cluster.log
        stdout_logfile_maxbytes: 50MB
        redirect_stderr: True
        environment: "PRODUCTION=1"

      "program:dask-cluster-pgir":
        command: /usr/local/bin/python dask_cluster_pgir.py
        directory: /app
        user: root
        autostart: true
        autorestart: true
        stdout_logfile: /data/logs/dask_cluster_pgir.log
        stdout_logfile_maxbytes: 50MB
        redirect_stderr: True
        environment: "PRODUCTION=1"

      "program:alert-broker-ztf":
        command: /usr/local/bin/python alert_broker_ztf.py
        directory: /app
        user: root
        autostart: true
        autorestart: true
        stdout_logfile: /data/logs/alert_broker_ztf.log
        stdout_logfile_maxbytes: 30MB
        redirect_stderr: True
        environment: "PRODUCTION=1"

      "program:alert-broker-pgir":
        command: /usr/local/bin/python alert_broker_pgir.py
        directory: /app
        user: root
        autostart: true
        autorestart: true
        stdout_logfile: /data/logs/alert_broker_pgir.log
        stdout_logfile_maxbytes: 30MB
        redirect_stderr: True
        environment: "PRODUCTION=1"

      "program:ops-watcher-ztf":
        command: /usr/local/bin/python ops_watcher_ztf.py
        directory: /app
        user: root
        autostart: true
        autorestart: true
        stdout_logfile: /data/logs/ops_watcher_ztf.log
        stdout_logfile_maxbytes: 30MB
        redirect_stderr: True
        environment: "PRODUCTION=1"

      "program:tns-watcher":
        command: /usr/local/bin/python tns_watcher.py
        directory: /app
        user: root
        autostart: true
        autorestart: true
        stdout_logfile: /data/logs/tns_watcher.log
        stdout_logfile_maxbytes: 30MB
        redirect_stderr: True
        environment: "PRODUCTION=1"

      "program:performance_reporter":
        command: /usr/local/bin/python performance_reporter.py --send_to_slack --days_ago 1
        directory: /app
        user: root
        autostart: true
        autorestart: true
        stdout_logfile: /data/logs/performance_reporter_stdout.log
        stdout_logfile_maxbytes: 10MB
        redirect_stderr: True
